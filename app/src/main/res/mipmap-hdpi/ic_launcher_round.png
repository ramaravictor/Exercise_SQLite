/*
 * Copyright 2000-2014 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package standardDsls

def gdslScriptContext = context(scope: scriptScope(), filetypes:['gdsl'])

contributor([gdslScriptContext]) {
  method name: "context", params: [args: [:]], type: "java.lang.Object"
  method name: "context", params: [:], type: "java.lang.Object"
  method name: "contributor", params: [contexts: "java.util.List", body: {}], type: void
  method name: "contributor", params: [contexts: "java.util.Map", body: {}], type: void
  method name: "contributor", params: [contexts: "java.lang.Object", body: {}], type: void
  method name: "contribute", params: [pointcut: "Pointcut", body: {}], type: void
  method name: "scriptSuperClass", params: [args: [pattern: 'java.lang.String', superClass: 'java.lang.String']]

  method name: "currentType", params: [qName: String.name], type: "Pointcut", doc:'Matches when the current (qualifier or this) type is a subtype of the type described by the parameter'

  method name: "category", params: [categoryClass: "java.lang.String", isStatic:"java.lang.Boolean"], type: void
  method name: "category", params: [categoryClass: "java.lang.String"], type: void

  method name: "supportsVersion", params: [version: "java.lang.String"], type: boolean

  def version = [
          parameter(name: 'dsl', type: String.name),
          parameter(name: 'intellij', type: String.name),
  ]
  method name: "supportsVersion", namedParams: version, type: boolean
  method name: "assertVersion", namedParams: version, type: void

  // scopes
  method name: "closureScope", params: [contexts: "java.util.Map"], type: {}
  method name: "scriptScope", params: [contexts: "java.util.Map"], type: {}
  method name: "annotatedScope", params: [contexts: "java.util.Map"], type: {}

  method name: "hasAnnotation", params:[fqn: "java.lang.String"], type: "java.lang.Object"
  method name: "hasMethod", params:[memberPattern: "java.lang.Object"], type: "java.lang.Object"
  method name: "hasField", params:[memberPattern: "java.lang.Object"], type: "java.lang.Object"
}

def contributorBody = context(scope: closureScope(isArg: true), filetypes:['gdsl'])

contributor([contributorBody]) {
  if (enclosingCall("contributor") || enclosingCall("contribute")) {
    method name: "method", type: "void", params: [args: [
            parameter(name:'name', type:String.name, doc:'Method name'),
            parameter(name:'params', type:Map.name, doc:'A map representing method parameters'),
            parameter(name:'namedParams', type:Object.name, doc:'''A list representing method named parameters.<br>
Its elements should be calls to <code>parameter</code> method.'''),
            parameter(name:'type', type:Object.name, doc:'Return type name of the method'),
            parameter(name:'doc', type:String.name, doc:'Method documentation text'),
    ]], doc:'Describe a DSL method'
    method name: "variable", type: "void", params: [args: [
            parameter(name: "name", type: String.name, doc: 'Variable name'),
            parameter(name: 'type', type: String.name, doc: 'Variable type')
    ]], doc: 'Describe a DSL local variable'
    method name: "property", type: "void", params: [args: [
            parameter(name:'name', type:String.name, doc:'Property name'),
            parameter(name:'type', type:Object.name, doc:'Property type name'),
            parameter(name:'doc', type:String.name, doc:'Property documentation text'),
    ]], doc:'Describe a DSL property'
    method name: "parameter", type: "Parameter", params: [args: [
            parameter(name:'name', type:String.name, doc:'Parameter name'),
            parameter(name:'type', type:Object.name, doc:'Parameter type name'),
            parameter(name:'doc', type:String.name, doc:'Parameter documentation text'),
    ]], doc:'Describe a method named parameter'
    method name: "methodCall", type: "void", params: [generator: Closure.name]
    closureInMethod(method:[name: 'methodCall', type: 'void', params: [Closure.name]], params: [args: [
            parameter(name: 'name', type: String.name, doc: 'Called method name'),
            parameter(name: 'argumentTypes', type: 'java.lang.String[]', doc: 'Call\'s argument types')
    ]])

    method name: 'closureInMethod', params: [args: [
            parameter(name: 'method', type: Map.name),
            parameter(name: 'params',